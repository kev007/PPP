
PPP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001ae  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006a  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002c3  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014a  00000000  00000000  000004fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a1  00000000  00000000  00000645  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000102  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e0  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000b3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  74:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <display>:

	}	
	if ((B % buffer_size) == 0){

	}	
}
  7c:	08 95       	ret

0000007e <lauflicht>:
#define str 	0
#define data 	1
#define clk 	3

void lauflicht (void)
{
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	30 e0       	ldi	r19, 0x00	; 0
	int buffer = 4;
	int delay = 100;

	while(1)
	{
		PORTB = (1 << str);
  82:	a1 e0       	ldi	r26, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	40 e9       	ldi	r20, 0x90	; 144
  86:	51 e0       	ldi	r21, 0x01	; 1
		_delay_ms(delay);	
		
		if ((i % buffer) == 0){
			PORTB = (1 << data);
  88:	72 e0       	ldi	r23, 0x02	; 2
			PORTB = (0 << data);
		}
		i++;
		
		_delay_ms(delay);	
		PORTB ^= (1 << clk);
  8a:	68 e0       	ldi	r22, 0x08	; 8
	int buffer = 4;
	int delay = 100;

	while(1)
	{
		PORTB = (1 << str);
  8c:	a8 bb       	out	0x18, r26	; 24
  8e:	88 ee       	ldi	r24, 0xE8	; 232
  90:	93 e0       	ldi	r25, 0x03	; 3
  92:	fa 01       	movw	r30, r20
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <lauflicht+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9a:	d9 f7       	brne	.-10     	; 0x92 <lauflicht+0x14>
		_delay_ms(delay);	
		
		if ((i % buffer) == 0){
  9c:	c9 01       	movw	r24, r18
  9e:	83 70       	andi	r24, 0x03	; 3
  a0:	90 70       	andi	r25, 0x00	; 0
  a2:	89 2b       	or	r24, r25
  a4:	11 f4       	brne	.+4      	; 0xaa <lauflicht+0x2c>
			PORTB = (1 << data);
  a6:	78 bb       	out	0x18, r23	; 24
  a8:	01 c0       	rjmp	.+2      	; 0xac <lauflicht+0x2e>
		} else {
			PORTB = (0 << data);
  aa:	18 ba       	out	0x18, r1	; 24
  ac:	88 ee       	ldi	r24, 0xE8	; 232
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	fa 01       	movw	r30, r20
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lauflicht+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b8:	d9 f7       	brne	.-10     	; 0xb0 <lauflicht+0x32>
		}
		i++;
		
		_delay_ms(delay);	
		PORTB ^= (1 << clk);
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	86 27       	eor	r24, r22
  be:	88 bb       	out	0x18, r24	; 24
  c0:	88 ee       	ldi	r24, 0xE8	; 232
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	fa 01       	movw	r30, r20
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lauflicht+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  cc:	d9 f7       	brne	.-10     	; 0xc4 <lauflicht+0x46>
		_delay_ms(delay);
		PORTB ^= (1 << clk);
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	86 27       	eor	r24, r22
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	88 ee       	ldi	r24, 0xE8	; 232
  d6:	93 e0       	ldi	r25, 0x03	; 3
  d8:	fa 01       	movw	r30, r20
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lauflicht+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d9 f7       	brne	.-10     	; 0xd8 <lauflicht+0x5a>
		if ((i % buffer) == 0){
			PORTB = (1 << data);
		} else {
			PORTB = (0 << data);
		}
		i++;
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	3f 4f       	sbci	r19, 0xFF	; 255
  e6:	d2 cf       	rjmp	.-92     	; 0x8c <lauflicht+0xe>

000000e8 <tasterTest>:
	}
}

void tasterTest (void)
{
	PORTA = 0x00;
  e8:	1b ba       	out	0x1b, r1	; 27
}
  ea:	08 95       	ret

000000ec <init>:

volatile int16_t overflow = 0;

void init (void)
{
	DDRB	= 	0b00001011;
  ec:	8b e0       	ldi	r24, 0x0B	; 11
  ee:	87 bb       	out	0x17, r24	; 23
	DDRA	= 	0b11111111;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	8a bb       	out	0x1a, r24	; 26
	DDRD	= 	0x00;
  f4:	11 ba       	out	0x11, r1	; 17
	PORTA	= 	0b11111111;
  f6:	8b bb       	out	0x1b, r24	; 27
	PORTB	= 	0b00000100;
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	88 bb       	out	0x18, r24	; 24

	GICR 	= 	1<<INT2;			//aktiviert Interrupt
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	8b bf       	out	0x3b, r24	; 59
	MCUCSR 	|= 	(1<<ISC2);		//steigende Flanke
 100:	84 b7       	in	r24, 0x34	; 52
 102:	80 64       	ori	r24, 0x40	; 64
 104:	84 bf       	out	0x34, r24	; 52
	TCCR1B 	|= 	(1<<CS11);
	TCCR1B 	|= 	(1<<CS10);
	TIMSK 	|= 	(1<<TOIE1);
	TCNT1	=	0;
*/
	sei();	
 106:	78 94       	sei
				
}
 108:	08 95       	ret

0000010a <main>:

int main()
{
	init();
 10a:	0e 94 76 00 	call	0xec	; 0xec <init>

	lauflicht();
 10e:	0e 94 3f 00 	call	0x7e	; 0x7e <lauflicht>
	//tasterTest();
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	08 95       	ret

00000118 <__vector_18>:


ISR(INT2_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
	PORTA	^= 	0b11111111;
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	80 95       	com	r24
 128:	8b bb       	out	0x1b, r24	; 27
}
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
